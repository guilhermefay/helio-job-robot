"""
Analisador de Curr√≠culo com IA Real
Usa OpenAI/Anthropic para an√°lise qualitativa baseada na metodologia Carolina Martins
"""

import os
import json
import asyncio
from typing import Dict, List, Any, Optional
import openai
from anthropic import Anthropic
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

class AICurriculumAnalyzer:
    """
    Analisador inteligente que usa IA para avaliar qualidade do curr√≠culo
    seguindo a metodologia dos 13 passos da Carolina Martins
    """
    
    def __init__(self):
        self.openai_client = None
        self.anthropic_client = None
        
        # Debug das chaves
        openai_key = os.getenv('OPENAI_API_KEY', '')
        anthropic_key = os.getenv('ANTHROPIC_API_KEY', '')
        
        print(f"üîë OpenAI Key dispon√≠vel: {bool(openai_key and 'sk-' in openai_key)}")
        print(f"üîë Anthropic Key dispon√≠vel: {bool(anthropic_key and 'sk-' in anthropic_key)}")
        
        # Inicializar clientes de IA
        if openai_key and openai_key != 'your_openai_api_key_here' and 'sk-' in openai_key:
            openai.api_key = openai_key
            self.openai_client = openai
            print("‚úÖ Cliente OpenAI inicializado")
            
        if anthropic_key and anthropic_key != 'your_anthropic_api_key_here' and 'sk-' in anthropic_key:
            self.anthropic_client = Anthropic(api_key=anthropic_key)
            print("‚úÖ Cliente Anthropic inicializado")
    
    async def analisar_curriculo_completo(self, texto_curriculo: str, objetivo_vaga: str = "", palavras_chave_usuario: List[str] = None) -> Dict[str, Any]:
        """
        An√°lise completa usando IA seguindo metodologia Carolina Martins
        
        Returns:
            An√°lise detalhada com score real, elementos e recomenda√ß√µes
        """
        
        if palavras_chave_usuario is None:
            palavras_chave_usuario = []
        
        palavras_chave_str = ", ".join(palavras_chave_usuario) if palavras_chave_usuario else "N√£o fornecidas"
        
        prompt = f"""
# PERSONA E OBJETIVO
Voc√™ √© Carolina Martins, criadora da metodologia "Carreira Mete√≥rica" e mentora s√™nior de carreira com 20 anos de experi√™ncia. Sua miss√£o √© realizar um diagn√≥stico RIGOROSO e ESTRAT√âGICO do curr√≠culo, n√£o apenas verificando estrutura, mas avaliando profundamente sua efic√°cia para passar pela triagem de 6-30 segundos e conquistar a vaga desejada.

# CONTEXTO PARA AN√ÅLISE
Voc√™ receber√° tr√™s informa√ß√µes cruciais:
1. **Curr√≠culo completo**: {texto_curriculo}
2. **Vaga alvo**: {objetivo_vaga if objetivo_vaga else "N√£o especificada - an√°lise gen√©rica"}
3. **Palavras-chave estrat√©gicas**: [{palavras_chave_str}]

# CRIT√âRIOS DE AVALIA√á√ÉO - OS 3 PILARES DA METODOLOGIA

## PILAR 1: ESTRAT√âGIA E ALINHAMENTO (Peso 50%)
**Lei do Desapego em A√ß√£o:**
- O curr√≠culo foi CLARAMENTE personalizado para esta vaga espec√≠fica?
- Informa√ß√µes irrelevantes foram ELIMINADAS para dar foco ao que importa?
- O campo "Objetivo" corresponde EXATAMENTE ao t√≠tulo da vaga?
- O Resumo funciona como um "trailer" de filme (m√°x 10 linhas) que vende o profissional em 6 segundos?
- As palavras-chave foram integradas NATURALMENTE no resumo e experi√™ncias?

**VIOLA√á√ïES GRAVES DA LEI DO DESAPEGO:**
- CPF, RG, data nascimento, estado civil = demonstra amadorismo
- Endere√ßo completo com CEP = risco de seguran√ßa
- Se√ß√£o de Hobbies = totalmente irrelevante
- Informa√ß√µes pessoais desnecess√°rias = falta de profissionalismo

## PILAR 2: CONTE√öDO DE IMPACTO E RESULTADOS (Peso 40%)
**A Regra de Ouro - RESULTADOS > TAREFAS:**
- Cada experi√™ncia profissional (>8 meses) DEVE apresentar resultados
- Resultados tang√≠veis: n√∫meros, percentuais, valores, m√©tricas
- Resultados intang√≠veis: melhorias de processo, reconhecimentos
- Verbos de a√ß√£o fortes: liderei, implementei, desenvolvi, alcancei
- Evitar verbos fracos: ajudei, participei, fiz, auxiliei

**Storytelling de Carreira:**
- As experi√™ncias contam uma hist√≥ria de evolu√ß√£o profissional?
- Promo√ß√µes est√£o claras e bem estruturadas?
- A ordem das se√ß√µes valoriza os pontos fortes para ESTA vaga?

## PILAR 3: PROFISSIONALISMO E FORMATA√á√ÉO (Peso 10%)
**Visual que Passa Confian√ßa:**
- Formata√ß√£o limpa: fundo branco, fonte preta, sem cores ou √≠cones
- Estrutura clara: se√ß√µes bem definidas, f√°cil leitura r√°pida
- Portugu√™s impec√°vel: zero erros de digita√ß√£o ou gram√°tica
- E-mail profissional: gmail/outlook, sem n√∫meros ou apelidos

# SISTEMA DE PENALIZA√á√ïES RIGOROSO

**COMECE com 100 pontos e SUBTRAIA:**

**Viola√ß√µes da Lei do Desapego:**
- CPF/RG presente: -30 pontos
- Data nascimento/idade: -30 pontos
- Estado civil: -30 pontos
- Endere√ßo completo: -30 pontos
- Se√ß√£o Hobbies: -40 pontos
- Foto no curr√≠culo: -40 pontos

**Falhas Metodol√≥gicas Graves:**
- Objetivo gen√©rico "busco oportunidade": -40 pontos
- Sem resumo executivo: -40 pontos
- ZERO resultados quantificados: -50 pontos
- Email n√£o profissional (hotmail/n√∫meros): -20 pontos
- Pretens√£o salarial: -30 pontos

**Erros de Conte√∫do:**
- Linguagem informal (fiz, ajudei): -30 pontos
- Habilidades gen√©ricas (proativo, din√¢mico): -20 pontos
- "Pacote Office completo": -10 pontos
- CNH sem ser motorista: -10 pontos
- Cursos irrelevantes de 40h: -10 pontos

**REGRA FINAL**: Se o curr√≠culo acumular mais de 150 pontos em penaliza√ß√µes, o score m√°ximo √© 20.

# ESTRUTURA DE RESPOSTA (JSON OBRIGAT√ìRIO)
Sua resposta deve ser um √∫nico bloco de c√≥digo JSON, sem NENHUM texto antes ou depois:

{{
    "penalizacoes_aplicadas": {{
        "violacoes_lei_desapego": [
            {{"item": "CPF presente", "encontrado": true/false, "penalizacao": -30}},
            {{"item": "Data nascimento", "encontrado": true/false, "penalizacao": -30}},
            {{"item": "Estado civil", "encontrado": true/false, "penalizacao": -30}},
            {{"item": "Endere√ßo completo", "encontrado": true/false, "penalizacao": -30}},
            {{"item": "Se√ß√£o Hobbies", "encontrado": true/false, "penalizacao": -40}},
            {{"item": "Foto no curr√≠culo", "encontrado": true/false, "penalizacao": -40}}
        ],
        "falhas_metodologicas": [
            {{"item": "Objetivo gen√©rico", "encontrado": true/false, "penalizacao": -40}},
            {{"item": "Sem resumo executivo", "encontrado": true/false, "penalizacao": -40}},
            {{"item": "Zero resultados", "encontrado": true/false, "penalizacao": -50}},
            {{"item": "Email n√£o profissional", "encontrado": true/false, "penalizacao": -20}},
            {{"item": "Pretens√£o salarial", "encontrado": true/false, "penalizacao": -30}}
        ],
        "erros_conteudo": [
            {{"item": "Linguagem informal", "encontrado": true/false, "penalizacao": -30}},
            {{"item": "Habilidades gen√©ricas", "encontrado": true/false, "penalizacao": -20}},
            {{"item": "Pacote Office completo", "encontrado": true/false, "penalizacao": -10}},
            {{"item": "CNH irrelevante", "encontrado": true/false, "penalizacao": -10}}
        ],
        "total_penalizacoes": <soma de TODAS as penaliza√ß√µes onde encontrado=true>
    }},
    "score_geral_meteoro": <100 - total_penalizacoes, m√≠nimo 0, m√°ximo 100>,
    "analise_estrategica": {{
        "alinhamento_com_vaga": {{"nota": <0-10>, "feedback": "O curr√≠culo foi personalizado para esta vaga espec√≠fica? Aplica a Lei do Desapego?"}},
        "qualidade_resumo_trailer": {{"nota": <0-10>, "feedback": "O resumo consegue vender o profissional em 6 segundos? Tem no m√°ximo 10 linhas?"}},
        "uso_de_palavras_chave": {{"nota": <0-10>, "feedback": "As palavras-chave foram integradas naturalmente ou est√£o ausentes/for√ßadas?"}}
    }},
    "analise_de_conteudo": {{
        "foco_em_resultados": {{"nota": <0-10>, "feedback": "CR√çTICO: Cada experi√™ncia apresenta resultados tang√≠veis ou intang√≠veis? Usa verbos de a√ß√£o fortes?"}},
        "storytelling_de_carreira": {{"nota": <0-10>, "feedback": "A progress√£o de carreira est√° clara? A ordem das se√ß√µes √© estrat√©gica para esta vaga?"}}
    }},
    "analise_formal": {{
        "formatacao_e_clareza": {{"nota": <0-10>, "feedback": "O curr√≠culo tem formata√ß√£o profissional, limpa e facilita a leitura r√°pida?"}},
        "validacao_honestidade": {{"nota": <0-10>, "feedback": "As informa√ß√µes s√£o consistentes? H√° erros de portugu√™s ou dados suspeitos?"}}
    }},
    "diagnostico_final_mentor": {{
        "pontos_fortes_meteoro": [
            "Liste 2-3 pontos APENAS se o curr√≠culo tem score > 60. Caso contr√°rio: ['Nenhum ponto forte identificado - curr√≠culo precisa ser refeito']"
        ],
        "pontos_de_melhoria_urgentes": [
            "Liste as 3 a√ß√µes MAIS CR√çTICAS para transformar este curr√≠culo em mete√≥rico"
        ],
        "red_flags": [
            "Liste TODOS os problemas graves que eliminariam o candidato na triagem"
        ],
        "caminho_para_100": {{
            "explicacao_score": <string explicando por que o score atual>,
            "falhas_criticas": [
                "Lista DIN√ÇMICA das viola√ß√µes graves que zeraram ou reduziram drasticamente o score"
            ],
            "erros_conteudo": [
                "Lista DIN√ÇMICA dos problemas de conte√∫do e profissionalismo"
            ],
            "plano_acao_100": {{
                "limpeza_radical": [
                    "A√ß√µes espec√≠ficas de elimina√ß√£o baseadas nas viola√ß√µes encontradas"
                ],
                "direcionamento_estrategico": [
                    "A√ß√µes para personalizar o curr√≠culo para a vaga"
                ],
                "foco_em_impacto": [
                    "Como transformar tarefas em resultados quantificados"
                ]
            }},
            "conceitos_metodologia": {{
                "lei_do_desapego": "Como aplicar: [explica√ß√£o espec√≠fica para este curr√≠culo]",
                "curriculo_trailer": "Como criar: [orienta√ß√£o espec√≠fica]",
                "resultados_vs_tarefas": "Exemplos pr√°ticos: [baseados nas experi√™ncias do candidato]",
                "triagem_6_segundos": "O que mostrar primeiro: [sugest√µes personalizadas]"
            }}
        }}
    }}
}}

        ### C√ÅLCULO DO SCORE - SISTEMA DE PENALIZA√á√ïES OBRIGAT√ìRIO
        
        **COMECE COM 100 PONTOS E APLIQUE TODAS AS PENALIZA√á√ïES:**
        
        **VIOLA√á√ïES GRAVES (reduzir imediatamente):**
        - Tem CPF? = -40 pontos
        - Tem data de nascimento? = -40 pontos  
        - Tem estado civil? = -40 pontos
        - Tem se√ß√£o de HOBBIES? = -30 pontos
        - Tem endere√ßo completo? = -40 pontos
        - Email hotmail/yahoo/n√∫meros? = -20 pontos
        - Tem pretens√£o salarial? = -20 pontos
        - Objetivo gen√©rico "busco oportunidade"? = -40 pontos
        
        **FALHAS METODOL√ìGICAS:**
        - N√ÉO tem resumo executivo? = -30 pontos
        - ZERO resultados quantificados? = -50 pontos
        - Usa "fiz", "ajudei", "participei"? = -30 pontos
        - Tem se√ß√£o "HABILIDADES" gen√©ricas? = -20 pontos
        - Pacote Office completo? = -10 pontos
        - CNH sem ser motorista? = -10 pontos
        
        **CALCULE O SCORE FINAL:**
        1. Identifique TODAS as viola√ß√µes
        2. Some TODAS as penaliza√ß√µes
        3. Subtraia de 100
        4. Se o resultado for negativo, score = 0
        
        **EXEMPLO REAL:**
        Curr√≠culo com CPF (-40) + Hobbies (-30) + Email hotmail (-20) + Zero resultados (-50) + "busco oportunidade" (-40) + Habilidades gen√©ricas (-20) = -200 pontos
        Score final: 100 - 200 = 0 (m√≠nimo √© 0)
        
        VOC√ä DEVE LISTAR TODAS AS PENALIZA√á√ïES APLICADAS!
        
        # EXPLICA√á√ÉO OBRIGAT√ìRIA DO SCORE - TOM DE MENTOR
        
        No campo "caminho_para_100", voc√™ DEVE agir como Carolina Martins explicando:
        
        1. **explicacao_score**: 
           - Se score = 0: "Seu curr√≠culo atual cont√©m m√∫ltiplas falhas cr√≠ticas que o tornam ineficaz para um processo seletivo moderno. A presen√ßa desses erros zera o score inicial."
           - Se score < 30: "O curr√≠culo apresenta viola√ß√µes graves da metodologia que comprometem severamente suas chances."
           - Se score 30-60: "O curr√≠culo tem potencial mas precisa de ajustes significativos para se tornar mete√≥rico."
           - Se score > 60: "Bom trabalho! O curr√≠culo est√° no caminho certo, mas ainda h√° oportunidades de melhoria."
        
        2. **falhas_criticas**: Liste APENAS as viola√ß√µes que encontrou, n√£o invente. Exemplos:
           - "Viola√ß√£o da Lei do Desapego e LGPD: CPF, data nascimento, estado civil presentes"
           - "Falta de foco estrat√©gico: objetivo gen√©rico e aus√™ncia de resumo executivo"
           - "Falta de prova de impacto: zero resultados quantificados"
           - "Conte√∫do irrelevante: se√ß√£o de hobbies, pretens√£o salarial"
        
        3. **erros_conteudo**: Problemas menos graves mas importantes:
           - "Linguagem fraca: uso de 'fiz', 'ajudei' em vez de verbos de a√ß√£o"
           - "Habilidades gen√©ricas que n√£o comprovam compet√™ncia"
           - "Email n√£o profissional (hotmail/yahoo com n√∫meros)"
        
        4. **plano_acao_100**: Seja ESPEC√çFICO e PR√ÅTICO:
           - limpeza_radical: Baseado nas viola√ß√µes reais encontradas
           - direcionamento_estrategico: Como personalizar para a vaga alvo
           - foco_em_impacto: Exemplos de como quantificar baseado no que est√° no curr√≠culo
        
        5. **conceitos_metodologia**: Explique de forma pr√°tica:
           - Como aplicar cada conceito no contexto DESTE curr√≠culo espec√≠fico
           - N√£o seja gen√©rico, use exemplos do pr√≥prio curr√≠culo do candidato
        """
        
        try:
            print(f"üîç Analisando curr√≠culo com IA...")
            print(f"üìä Anthropic dispon√≠vel: {self.anthropic_client is not None}")
            print(f"üìä OpenAI dispon√≠vel: {self.openai_client is not None}")
            
            if self.anthropic_client:
                print("ü§ñ Usando Anthropic/Claude para an√°lise...")
                response = await self._chamar_anthropic(prompt)
            elif self.openai_client:
                print("ü§ñ Usando OpenAI/GPT para an√°lise...")
                response = await self._chamar_openai(prompt)
            else:
                print("‚ö†Ô∏è  Nenhuma IA configurada, usando fallback...")
                # Fallback para an√°lise b√°sica se n√£o tiver IA
                return self._analise_basica_fallback(texto_curriculo)
            
            # Limpar resposta para garantir apenas JSON
            response_clean = response.strip()
            
            # Se a resposta come√ßar com texto antes do JSON, extrair apenas o JSON
            if response_clean and not response_clean.startswith('{'):
                # Procurar pelo in√≠cio do JSON
                json_start = response_clean.find('{')
                if json_start != -1:
                    response_clean = response_clean[json_start:]
            
            # Se houver texto ap√≥s o JSON, remover
            if response_clean:
                # Contar chaves para encontrar o fim do JSON
                brace_count = 0
                json_end = -1
                for i, char in enumerate(response_clean):
                    if char == '{':
                        brace_count += 1
                    elif char == '}':
                        brace_count -= 1
                        if brace_count == 0:
                            json_end = i + 1
                            break
                
                if json_end > 0:
                    response_clean = response_clean[:json_end]
            
            # Parse da resposta JSON e adaptar para formato esperado
            try:
                analise_resultado = json.loads(response_clean)
            except json.JSONDecodeError as e:
                print(f"Erro ao parsear JSON: {e}")
                print(f"Resposta recebida: {response_clean[:500]}...")
                raise
            
            # Adaptar para formato compat√≠vel com frontend atual
            return self._adaptar_formato_resposta(analise_resultado)
            
        except Exception as e:
            print(f"Erro na an√°lise com IA: {e}")
            return self._analise_basica_fallback(texto_curriculo)
    
    async def _chamar_anthropic(self, prompt: str) -> str:
        """Chama API do Claude/Anthropic"""
        try:
            response = self.anthropic_client.messages.create(
                model="claude-3-haiku-20240307",
                max_tokens=2000,
                temperature=0.1,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text.strip()
        except Exception as e:
            raise Exception(f"Erro Anthropic: {e}")
    
    async def _chamar_openai(self, prompt: str) -> str:
        """Chama API do OpenAI"""
        try:
            # Nova sintaxe da OpenAI
            from openai import OpenAI
            client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=2000,
                temperature=0.1
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            raise Exception(f"Erro OpenAI: {e}")
    
    def _analise_basica_fallback(self, texto_curriculo: str) -> Dict[str, Any]:
        """An√°lise b√°sica quando IA n√£o est√° dispon√≠vel"""
        print("‚ö†Ô∏è  ATEN√á√ÉO: Usando an√°lise FALLBACK - IA n√£o est√° configurada!")
        print("‚ùå Para an√°lise real com IA, configure OPENAI_API_KEY ou ANTHROPIC_API_KEY no arquivo .env")
        
        texto_lower = texto_curriculo.lower()
        
        # Detectar red flags b√°sicos
        red_flags = []
        if any(flag in texto_lower for flag in ['quando dava vontade', 'n√£o lembro', 'acho que', 'n√∫mero falso']):
            red_flags.append("Linguagem n√£o profissional detectada")
        
        if any(info in texto_lower for info in ['signo', 'time', 'altura', 'peso', 'religi√£o']):
            red_flags.append("Informa√ß√µes pessoais irrelevantes")
        
        # Score fixo de 35 para indicar que √© fallback
        score_final = 35
        
        return {
            "score_geral": score_final,
            "elementos_metodologia": {},
            "validacoes_honestidade": {},
            "red_flags": ["‚ö†Ô∏è AN√ÅLISE SIMPLES - Configure API keys para an√°lise com IA real"] + red_flags,
            "pontos_fortes": [],
            "recomendacoes_prioritarias": ["Configure OPENAI_API_KEY ou ANTHROPIC_API_KEY no arquivo .env para an√°lise completa"],
            "palavras_chave_identificadas": []
        }
    
    def _adaptar_formato_resposta(self, analise_ia: Dict[str, Any]) -> Dict[str, Any]:
        """Adapta o formato da IA para o formato esperado pelo frontend"""
        
        # Extrair dados principais
        score = analise_ia.get('score_geral_meteoro', 0)
        analise_estrategica = analise_ia.get('analise_estrategica', {})
        analise_conteudo = analise_ia.get('analise_de_conteudo', {})
        analise_formal = analise_ia.get('analise_formal', {})
        feedback = analise_ia.get('diagnostico_final_mentor', {})
        penalizacoes = analise_ia.get('penalizacoes_aplicadas', {})
        
        # Simular elementos metodologia para compatibilidade
        elementos_metodologia = {
            'dados_pessoais': {'presente': True, 'qualidade': 8},
            'objetivo_profissional': {
                'presente': analise_estrategica.get('alinhamento_com_vaga', {}).get('nota', 0) > 0,
                'qualidade': analise_estrategica.get('alinhamento_com_vaga', {}).get('nota', 0)
            },
            'resumo_executivo': {
                'presente': analise_estrategica.get('qualidade_resumo_trailer', {}).get('nota', 0) > 0,
                'qualidade': analise_estrategica.get('qualidade_resumo_trailer', {}).get('nota', 0)
            },
            'experiencias': {
                'presente': analise_conteudo.get('foco_em_resultados', {}).get('nota', 0) > 0,
                'qualidade': analise_conteudo.get('foco_em_resultados', {}).get('nota', 0)
            },
            'resultados_quantificados': {
                'presente': analise_conteudo.get('foco_em_resultados', {}).get('nota', 0) > 5,
                'qualidade': analise_conteudo.get('foco_em_resultados', {}).get('nota', 0)
            },
            'formacao': {
                'presente': analise_conteudo.get('storytelling_de_carreira', {}).get('nota', 0) > 0,
                'qualidade': analise_conteudo.get('storytelling_de_carreira', {}).get('nota', 0)
            }
        }
        
        # Valida√ß√µes de honestidade
        validacoes_honestidade = {
            'datas_consistentes': {
                'status': analise_formal.get('validacao_honestidade', {}).get('nota', 0) > 5,
                'observacao': analise_formal.get('validacao_honestidade', {}).get('feedback', '')
            },
            'informacoes_verificaveis': {
                'status': analise_formal.get('validacao_honestidade', {}).get('nota', 0) > 5,
                'observacao': 'Baseado na an√°lise de consist√™ncia'
            },
            'detalhamento_adequado': {
                'status': analise_conteudo.get('foco_em_resultados', {}).get('nota', 0) > 5,
                'observacao': analise_conteudo.get('foco_em_resultados', {}).get('feedback', '')
            },
            'verbos_acao': {
                'status': analise_conteudo.get('foco_em_resultados', {}).get('nota', 0) > 3,
                'observacao': 'Baseado na an√°lise das experi√™ncias'
            }
        }
        
        # Processar caminho_para_100 e calcular total de penaliza√ß√µes
        caminho_para_100 = feedback.get('caminho_para_100', {})
        
        # Calcular total de penaliza√ß√µes se houver dados de penaliza√ß√µes
        if penalizacoes:
            total_penalizacoes_calculado = 0
            
            # Somar todas as penaliza√ß√µes encontradas
            for categoria in ['violacoes_lei_desapego', 'falhas_metodologicas', 'erros_conteudo']:
                if categoria in penalizacoes:
                    for item in penalizacoes[categoria]:
                        if item.get('encontrado', False):
                            total_penalizacoes_calculado += abs(item.get('penalizacao', 0))
            
            # Atualizar o total no caminho_para_100
            caminho_para_100['total_penalizacoes'] = total_penalizacoes_calculado
            
            # Criar lista de penaliza√ß√µes detalhadas se n√£o existir
            if 'penalizacoes_detalhadas' not in caminho_para_100:
                penalizacoes_detalhadas = []
                for categoria in ['violacoes_lei_desapego', 'falhas_metodologicas', 'erros_conteudo']:
                    if categoria in penalizacoes:
                        for item in penalizacoes[categoria]:
                            if item.get('encontrado', False):
                                penalizacoes_detalhadas.append(f"{item['item']}: {item['penalizacao']} pontos")
                caminho_para_100['penalizacoes_detalhadas'] = penalizacoes_detalhadas
            
            # Adicionar explica√ß√£o quando h√° m√∫ltiplas falhas cr√≠ticas
            if total_penalizacoes_calculado >= 100 and score == 0:
                caminho_para_100['explicacao_score'] = "A presen√ßa de m√∫ltiplas falhas cr√≠ticas zera o score inicial."
                caminho_para_100['total_penalizacoes_texto'] = f"Total de penaliza√ß√µes: -{total_penalizacoes_calculado} pontos"
            else:
                caminho_para_100['total_penalizacoes_texto'] = f"Total de penaliza√ß√µes: -{total_penalizacoes_calculado} pontos"

        return {
            'score_geral': score,
            'elementos_metodologia': elementos_metodologia,
            'validacoes_honestidade': validacoes_honestidade,
            'red_flags': feedback.get('red_flags', []),
            'pontos_fortes': feedback.get('pontos_fortes_meteoro', []),
            'recomendacoes_prioritarias': feedback.get('pontos_de_melhoria_urgentes', []),
            'palavras_chave_identificadas': [],
            'caminho_para_100': caminho_para_100,  # Usar o objeto processado
            'analise_completa_ia': analise_ia  # Preservar an√°lise completa para debug
        }