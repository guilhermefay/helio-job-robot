"""
Location Expander - Sistema HELIO
Expans√£o geogr√°fica inteligente usando IA
"""

import os
import json
import logging
from typing import List, Dict, Any
from dataclasses import dataclass
import google.generativeai as genai
from anthropic import Anthropic
import openai
from dotenv import load_dotenv

logger = logging.getLogger(__name__)
load_dotenv()


@dataclass
class LocalidadeExpandida:
    """Representa uma localidade expandida com metadados"""
    nome: str
    distancia_km: float
    relevancia: float
    tipo: str  # 'cidade_principal', 'regiao_metropolitana', 'cidade_proxima', 'remoto'
    justificativa: str


class LocationExpander:
    """
    Expande localiza√ß√£o de forma inteligente usando IA
    Considera mobilidade urbana, mercado de trabalho e prefer√™ncias
    """
    
    def __init__(self):
        # Configurar clientes de IA
        self.gemini_client = None
        self.anthropic_client = None
        self.openai_client = None
        
        # Tentar configurar Gemini (preferencial por ter conhecimento geogr√°fico brasileiro)
        if os.getenv('GOOGLE_API_KEY'):
            genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
            self.gemini_client = genai.GenerativeModel('gemini-1.5-pro')
            logger.info("‚úÖ Gemini configurado para expans√£o geogr√°fica")
        
        # Fallback para Claude
        elif os.getenv('ANTHROPIC_API_KEY'):
            self.anthropic_client = Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
            logger.info("‚úÖ Claude configurado para expans√£o geogr√°fica")
        
        # Fallback para OpenAI
        elif os.getenv('OPENAI_API_KEY'):
            openai.api_key = os.getenv('OPENAI_API_KEY')
            self.openai_client = openai
            logger.info("‚úÖ OpenAI configurado para expans√£o geogr√°fica")
        
        # Cache de expans√µes para economizar chamadas
        self.cache = {}
    
    def expandir_localizacao(
        self,
        local_base: str,
        tipo_vaga: str,
        limite: int = 10
    ) -> List[Dict[str, Any]]:
        """
        Expande localiza√ß√£o considerando tipo de vaga e mobilidade
        
        Args:
            local_base: Cidade/estado base do usu√°rio
            tipo_vaga: presencial, hibrido ou remoto
            limite: Quantidade m√°xima de locais
            
        Returns:
            Lista de localiza√ß√µes ordenadas por relev√¢ncia
        """
        
        # Verificar cache
        cache_key = f"{local_base}_{tipo_vaga}_{limite}"
        if cache_key in self.cache:
            logger.info(f"üìç Usando cache para {local_base}")
            return self.cache[cache_key]
        
        # Para vagas remotas, retornar conjunto padr√£o
        if tipo_vaga == "remoto":
            return self._locais_remotos_padrao()
        
        # Usar IA para expans√£o inteligente
        locais_expandidos = []
        
        try:
            if self.gemini_client:
                locais_expandidos = self._expandir_com_gemini(local_base, tipo_vaga, limite)
            elif self.anthropic_client:
                locais_expandidos = self._expandir_com_claude(local_base, tipo_vaga, limite)
            elif self.openai_client:
                locais_expandidos = self._expandir_com_openai(local_base, tipo_vaga, limite)
            else:
                logger.warning("‚ö†Ô∏è Nenhuma IA configurada, usando expans√£o b√°sica")
                locais_expandidos = self._expansao_basica(local_base, tipo_vaga)
        
        except Exception as e:
            logger.error(f"‚ùå Erro na expans√£o com IA: {e}")
            locais_expandidos = self._expansao_basica(local_base, tipo_vaga)
        
        # Cachear resultado
        self.cache[cache_key] = locais_expandidos
        
        return locais_expandidos[:limite]
    
    def _expandir_com_gemini(self, local_base: str, tipo_vaga: str, limite: int) -> List[Dict[str, Any]]:
        """
        Usa Gemini para expans√£o geogr√°fica inteligente
        """
        prompt = self._criar_prompt_expansao(local_base, tipo_vaga, limite)
        
        try:
            response = self.gemini_client.generate_content(
                prompt,
                generation_config={
                    "temperature": 0.3,
                    "max_output_tokens": 2000,
                }
            )
            
            # Extrair JSON da resposta
            texto = response.text
            inicio = texto.find('[')
            fim = texto.rfind(']') + 1
            
            if inicio >= 0 and fim > inicio:
                locais = json.loads(texto[inicio:fim])
                return locais
            
        except Exception as e:
            logger.error(f"Erro Gemini: {e}")
        
        return []
    
    def _expandir_com_claude(self, local_base: str, tipo_vaga: str, limite: int) -> List[Dict[str, Any]]:
        """
        Usa Claude para expans√£o geogr√°fica
        """
        prompt = self._criar_prompt_expansao(local_base, tipo_vaga, limite)
        
        try:
            response = self.anthropic_client.messages.create(
                model="claude-3-sonnet-20240229",
                max_tokens=2000,
                temperature=0.3,
                messages=[{
                    "role": "user",
                    "content": prompt
                }]
            )
            
            texto = response.content[0].text
            inicio = texto.find('[')
            fim = texto.rfind(']') + 1
            
            if inicio >= 0 and fim > inicio:
                locais = json.loads(texto[inicio:fim])
                return locais
                
        except Exception as e:
            logger.error(f"Erro Claude: {e}")
        
        return []
    
    def _expandir_com_openai(self, local_base: str, tipo_vaga: str, limite: int) -> List[Dict[str, Any]]:
        """
        Usa OpenAI para expans√£o geogr√°fica
        """
        prompt = self._criar_prompt_expansao(local_base, tipo_vaga, limite)
        
        try:
            response = self.openai_client.ChatCompletion.create(
                model="gpt-4-turbo-preview",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um especialista em geografia brasileira e mercado de trabalho."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=2000
            )
            
            texto = response.choices[0].message.content
            inicio = texto.find('[')
            fim = texto.rfind(']') + 1
            
            if inicio >= 0 and fim > inicio:
                locais = json.loads(texto[inicio:fim])
                return locais
                
        except Exception as e:
            logger.error(f"Erro OpenAI: {e}")
        
        return []
    
    def _criar_prompt_expansao(self, local_base: str, tipo_vaga: str, limite: int) -> str:
        """
        Cria prompt otimizado para expans√£o geogr√°fica
        """
        
        distancia_max = "50km" if tipo_vaga == "presencial" else "100km"
        
        prompt = f"""Voc√™ √© um especialista em geografia brasileira e mercado de trabalho.

Tarefa: Expandir a busca de vagas a partir de "{local_base}" para trabalho {tipo_vaga}.

Considere:
1. Dist√¢ncia e tempo de deslocamento (m√°ximo {distancia_max} para {tipo_vaga})
2. Conex√µes de transporte p√∫blico e rodovias
3. Polos de emprego e centros empresariais
4. Qualidade do mercado de trabalho local

Para trabalho {tipo_vaga}, priorize:
- Presencial: cidades muito pr√≥ximas, mesma regi√£o metropolitana
- H√≠brido: cidades em um raio maior, considerando deslocamento 2-3x por semana
- Remoto: principais centros de tecnologia do Brasil

Retorne APENAS um JSON array com {limite} locais no formato:
[
  {{
    "nome": "Cidade, Estado",
    "distancia_km": 0,
    "relevancia": 1.0,
    "tipo": "cidade_principal",
    "justificativa": "Cidade base do candidato"
  }},
  {{
    "nome": "Cidade Pr√≥xima, Estado", 
    "distancia_km": 25,
    "relevancia": 0.9,
    "tipo": "regiao_metropolitana",
    "justificativa": "Mesma regi√£o metropolitana, f√°cil acesso"
  }}
]

IMPORTANTE: 
- Use nomes reais de cidades brasileiras
- Formato: "Cidade, UF" (ex: "S√£o Paulo, SP")
- Ordene por relev√¢ncia decrescente
- Retorne APENAS o JSON, sem texto adicional"""
        
        return prompt
    
    def _expansao_basica(self, local_base: str, tipo_vaga: str) -> List[Dict[str, Any]]:
        """
        Expans√£o b√°sica sem IA - usa dados pr√©-definidos
        """
        # Regi√µes metropolitanas principais do Brasil
        regioes_metro = {
            "s√£o paulo": ["S√£o Paulo, SP", "Guarulhos, SP", "S√£o Bernardo do Campo, SP", "Santo Andr√©, SP", "Osasco, SP"],
            "rio de janeiro": ["Rio de Janeiro, RJ", "Niter√≥i, RJ", "S√£o Gon√ßalo, RJ", "Duque de Caxias, RJ", "Nova Igua√ßu, RJ"],
            "belo horizonte": ["Belo Horizonte, MG", "Contagem, MG", "Betim, MG", "Nova Lima, MG", "Ribeir√£o das Neves, MG"],
            "porto alegre": ["Porto Alegre, RS", "Canoas, RS", "Gravata√≠, RS", "Viam√£o, RS", "Novo Hamburgo, RS"],
            "curitiba": ["Curitiba, PR", "S√£o Jos√© dos Pinhais, PR", "Colombo, PR", "Arauc√°ria, PR", "Pinhais, PR"],
            "campinas": ["Campinas, SP", "Jundia√≠, SP", "Americana, SP", "Sumar√©, SP", "Hortol√¢ndia, SP"],
            "bras√≠lia": ["Bras√≠lia, DF", "Taguatinga, DF", "Ceil√¢ndia, DF", "√Åguas Claras, DF", "Samambaia, DF"]
        }
        
        # Identificar regi√£o
        local_lower = local_base.lower()
        cidades = [local_base]  # Sempre incluir cidade base
        
        # Buscar regi√£o metropolitana
        for regiao, lista_cidades in regioes_metro.items():
            if regiao in local_lower:
                cidades.extend(lista_cidades[:4])  # Adicionar at√© 4 cidades pr√≥ximas
                break
        
        # Se n√£o encontrou, adicionar capitais principais
        if len(cidades) == 1:
            if tipo_vaga == "hibrido":
                cidades.extend([
                    "S√£o Paulo, SP",
                    "Rio de Janeiro, RJ", 
                    "Belo Horizonte, MG"
                ])
            else:  # presencial
                # Apenas cidade base para presencial sem regi√£o metro
                pass
        
        # Formatar resultado
        resultado = []
        for i, cidade in enumerate(cidades[:10]):
            resultado.append({
                "nome": cidade,
                "distancia_km": 0 if i == 0 else (i * 20),  # Estimativa
                "relevancia": 1.0 - (i * 0.1),
                "tipo": "cidade_principal" if i == 0 else "expansao_basica",
                "justificativa": "Expans√£o b√°sica sem IA"
            })
        
        return resultado
    
    def _locais_remotos_padrao(self) -> List[Dict[str, Any]]:
        """
        Retorna locais padr√£o para vagas remotas
        """
        return [
            {
                "nome": "Remote",
                "distancia_km": 0,
                "relevancia": 1.0,
                "tipo": "remoto",
                "justificativa": "Busca global para vagas remotas"
            },
            {
                "nome": "Brasil",
                "distancia_km": 0,
                "relevancia": 0.95,
                "tipo": "remoto",
                "justificativa": "Vagas remotas nacionais"
            },
            {
                "nome": "S√£o Paulo, SP",
                "distancia_km": 0,
                "relevancia": 0.9,
                "tipo": "remoto",
                "justificativa": "Principal hub de tecnologia"
            },
            {
                "nome": "Rio de Janeiro, RJ",
                "distancia_km": 0,
                "relevancia": 0.85,
                "tipo": "remoto",
                "justificativa": "Segundo maior hub tecnol√≥gico"
            },
            {
                "nome": "Belo Horizonte, MG",
                "distancia_km": 0,
                "relevancia": 0.8,
                "tipo": "remoto",
                "justificativa": "Hub emergente de startups"
            }
        ]