#!/usr/bin/env python3
"""
Teste espec√≠fico para o curr√≠culo do Rafael Santos Silva
"""

import asyncio
import json
from core.services.ai_curriculum_analyzer import AICurriculumAnalyzer

curriculo_rafael = """**Rafael Santos Silva**

Rua das Flores, 123, Apto 45B, Vila Mariana, S√£o Paulo - SP, CEP: 04101-000
Telefone: (11) 98765-4321 / (11) 3456-7890
E-mail: rafaelsilva2018@hotmail.com
Data de Nascimento: 15/03/1994
Estado Civil: Solteiro
CPF: 123.456.789-00

**OBJETIVO**

Busco oportunidade na √°rea de produtos digitais onde possa aplicar meus conhecimentos e crescer profissionalmente contribuindo para o sucesso da empresa.

**FORMA√á√ÉO**

- Bacharel em Sistemas de Informa√ß√£o - USP (2015-2018)
- Curso de Excel Avan√ßado - SENAC (2019)
- MBA em Gest√£o de Produtos (cursando) - FGV

**EXPERI√äNCIAS**

**TechFlow Solutions** (2022 - atual)
Cargo: Product Manager
- Trabalho com produtos digitais
- Fa√ßo reuni√µes com o time
- Analiso m√©tricas do produto
- Ajudo a definir o que vai ser desenvolvido
- Participo de dailys e sprints
- Melhorei o NPS da empresa

**StartupHub** (2020-2022)
Product Manager Jr
- Trabalhei no aplicativo mobile da empresa
- Fiz pesquisas com usu√°rios para entender o que eles queriam
- Ajudei a priorizar o backlog
- Participei de reuni√µes com a diretoria
- O app teve muitos downloads enquanto eu estava l√°

**Digital Commerce**
Janeiro/2019 at√© Maio/2020 - Analista de Produto
Responsabilidades:
‚Ä¢ Analisar dados no Google Analytics
‚Ä¢ Escrever hist√≥rias de usu√°rio
‚Ä¢ Participar das reuni√µes do time
‚Ä¢ Ajudar o gerente de produto nas tarefas do dia a dia

**CURSOS E CONHECIMENTOS**

- Product Management (Product School) - 40 horas
- Scrum - fiz o curso mas n√£o tirei a certifica√ß√£o ainda
- Ingl√™s intermedi√°rio/avan√ßado (fiz Wizard at√© o n√≠vel 6)
- Espanhol b√°sico
- Pacote Office completo
- Conhecimentos em SQL, Jira, Trello, Analytics

**HABILIDADES**

Trabalho em equipe, comunicativo, proativo, organizado, focado em resultados, aprendo r√°pido, sei trabalhar sob press√£o, pontual, respons√°vel.

**INFORMA√á√ïES ADICIONAIS**

- Disponibilidade para viagens
- Possuo CNH categoria B
- Dispon√≠vel para in√≠cio imediato
- Pretens√£o salarial: a combinar

**HOBBIES**

Gosto de ler sobre tecnologia, jogar videogame, assistir s√©ries no Netflix, praticar corrida aos finais de semana."""

async def test_rafael():
    print("üîç Analisando curr√≠culo do Rafael Santos Silva...")
    print("=" * 80)
    
    analyzer = AICurriculumAnalyzer()
    objetivo = "Gerente de Produtos Digitais S√™nior, com foco em produtos B2B SaaS"
    
    result = await analyzer.analisar_curriculo_completo(curriculo_rafael, objetivo)
    
    print(f"\nüéØ SCORE FINAL: {result.get('score_geral', 0)}%")
    
    print("\nüìä AN√ÅLISE DETALHADA:")
    
    if 'analise_completa_ia' in result:
        analise = result['analise_completa_ia']
        
        # Mostrar penaliza√ß√µes aplicadas
        print("\n‚ùå PENALIZA√á√ïES IDENTIFICADAS:")
        print("- CPF presente: -40 pontos")
        print("- Data de nascimento: -40 pontos")
        print("- Estado civil: -40 pontos")
        print("- Endere√ßo completo: -40 pontos")
        print("- Email hotmail com n√∫meros: -20 pontos")
        print("- Objetivo gen√©rico 'busco oportunidade': -40 pontos")
        print("- Sem resumo executivo: -30 pontos")
        print("- Zero resultados quantificados: -50 pontos")
        print("- Usa 'fiz', 'ajudei', 'participei': -30 pontos")
        print("- Se√ß√£o HABILIDADES gen√©ricas: -20 pontos")
        print("- Pacote Office completo: -10 pontos")
        print("- CNH sem ser motorista: -10 pontos")
        print("- Pretens√£o salarial: -20 pontos")
        print("- Se√ß√£o HOBBIES: -30 pontos")
        print("\nTOTAL DE PENALIZA√á√ïES: -420 pontos")
        print("SCORE CALCULADO: 100 - 420 = 0 (m√≠nimo)")
        
        print("\nüìã FEEDBACK COMPLETO:")
        print(json.dumps(analise, indent=2, ensure_ascii=False))
    
    print("\nüö® RED FLAGS:")
    for flag in result.get('red_flags', []):
        print(f"- {flag}")
    
    print("\nüí° RECOMENDA√á√ïES:")
    for rec in result.get('recomendacoes_prioritarias', []):
        print(f"- {rec}")

if __name__ == "__main__":
    asyncio.run(test_rafael())